import { baseApi } from "./baseApi"; // Your configured base API instance
import { tagTypes } from "./tagTypeList"; // Tag types for caching and invalidation
import { Imeta } from "@/types"; // Assuming Imeta is a defined interface in "@/types"

// Define the prescription API endpoints
export const prescriptionApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    /**
     * Mutation: Create a new prescription
     * Accepts the prescription data as input and sends a POST request to the API
     */
    createPrescription: build.mutation<void, Record<string, any>>({
      query: (data) => ({
        url: "/prescription", // Matches the POST endpoint for creating a prescription
        method: "POST",
        data,
      }),
      invalidatesTags: [{ type: tagTypes.prescription, id: "LIST" }], // Invalidates the prescription list cache after mutation
    }),

    /**
     * Query: Fetch prescriptions for a patient (or user)
     * Accepts query parameters and retrieves a list of prescriptions
     */
    getPrescription: build.query<
      { prescription: any[]; meta: Imeta; message: string },
      Record<string, any>
    >({
      query: (params) => ({
        url: "/prescription/my-prescriptions", // Matches the GET endpoint for retrieving prescriptions for a patient
        method: "GET",
        params, // Query parameters sent for filtering (e.g., pagination, search)
      }),
      transformResponse: (response: any) => ({
        prescription: response.data, // Map to the expected prescription structure
        meta: response.meta, // Pagination/meta information
        message: response.message, // Any additional messages from the API
      }),
      providesTags: (result) =>
        result
          ? [{ type: tagTypes.prescription, id: "LIST" }] // Cache tag for prescriptions list
          : [{ type: tagTypes.prescription }], // Cache tag for prescriptions, without specific id
    }),
  }),
});

// Export the hooks generated by RTK Query for usage in components
export const { useCreatePrescriptionMutation, useGetPrescriptionQuery } =
  prescriptionApi;
